/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SolarFlare } from "./SolarFlare";
import { SolarFlareCountArgs } from "./SolarFlareCountArgs";
import { SolarFlareFindManyArgs } from "./SolarFlareFindManyArgs";
import { SolarFlareFindUniqueArgs } from "./SolarFlareFindUniqueArgs";
import { CreateSolarFlareArgs } from "./CreateSolarFlareArgs";
import { UpdateSolarFlareArgs } from "./UpdateSolarFlareArgs";
import { DeleteSolarFlareArgs } from "./DeleteSolarFlareArgs";
import { SolarFlareService } from "../solarFlare.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SolarFlare)
export class SolarFlareResolverBase {
  constructor(
    protected readonly service: SolarFlareService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SolarFlare",
    action: "read",
    possession: "any",
  })
  async _solarFlaresMeta(
    @graphql.Args() args: SolarFlareCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SolarFlare])
  @nestAccessControl.UseRoles({
    resource: "SolarFlare",
    action: "read",
    possession: "any",
  })
  async solarFlares(
    @graphql.Args() args: SolarFlareFindManyArgs
  ): Promise<SolarFlare[]> {
    return this.service.solarFlares(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SolarFlare, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SolarFlare",
    action: "read",
    possession: "own",
  })
  async solarFlare(
    @graphql.Args() args: SolarFlareFindUniqueArgs
  ): Promise<SolarFlare | null> {
    const result = await this.service.solarFlare(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SolarFlare)
  @nestAccessControl.UseRoles({
    resource: "SolarFlare",
    action: "create",
    possession: "any",
  })
  async createSolarFlare(
    @graphql.Args() args: CreateSolarFlareArgs
  ): Promise<SolarFlare> {
    return await this.service.createSolarFlare({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SolarFlare)
  @nestAccessControl.UseRoles({
    resource: "SolarFlare",
    action: "update",
    possession: "any",
  })
  async updateSolarFlare(
    @graphql.Args() args: UpdateSolarFlareArgs
  ): Promise<SolarFlare | null> {
    try {
      return await this.service.updateSolarFlare({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SolarFlare)
  @nestAccessControl.UseRoles({
    resource: "SolarFlare",
    action: "delete",
    possession: "any",
  })
  async deleteSolarFlare(
    @graphql.Args() args: DeleteSolarFlareArgs
  ): Promise<SolarFlare | null> {
    try {
      return await this.service.deleteSolarFlare(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
