/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SolarFlareService } from "../solarFlare.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SolarFlareCreateInput } from "./SolarFlareCreateInput";
import { SolarFlare } from "./SolarFlare";
import { SolarFlareFindManyArgs } from "./SolarFlareFindManyArgs";
import { SolarFlareWhereUniqueInput } from "./SolarFlareWhereUniqueInput";
import { SolarFlareUpdateInput } from "./SolarFlareUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SolarFlareControllerBase {
  constructor(
    protected readonly service: SolarFlareService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SolarFlare })
  @nestAccessControl.UseRoles({
    resource: "SolarFlare",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: SolarFlareCreateInput,
  })
  async createSolarFlare(
    @common.Body() data: SolarFlareCreateInput
  ): Promise<SolarFlare> {
    return await this.service.createSolarFlare({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startTime: true,
        endTime: true,
        intensity: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [SolarFlare] })
  @ApiNestedQuery(SolarFlareFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SolarFlare",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async solarFlares(@common.Req() request: Request): Promise<SolarFlare[]> {
    const args = plainToClass(SolarFlareFindManyArgs, request.query);
    return this.service.solarFlares({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startTime: true,
        endTime: true,
        intensity: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SolarFlare })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SolarFlare",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async solarFlare(
    @common.Param() params: SolarFlareWhereUniqueInput
  ): Promise<SolarFlare | null> {
    const result = await this.service.solarFlare({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startTime: true,
        endTime: true,
        intensity: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SolarFlare })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SolarFlare",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: SolarFlareUpdateInput,
  })
  async updateSolarFlare(
    @common.Param() params: SolarFlareWhereUniqueInput,
    @common.Body() data: SolarFlareUpdateInput
  ): Promise<SolarFlare | null> {
    try {
      return await this.service.updateSolarFlare({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          startTime: true,
          endTime: true,
          intensity: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SolarFlare })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SolarFlare",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSolarFlare(
    @common.Param() params: SolarFlareWhereUniqueInput
  ): Promise<SolarFlare | null> {
    try {
      return await this.service.deleteSolarFlare({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          startTime: true,
          endTime: true,
          intensity: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
