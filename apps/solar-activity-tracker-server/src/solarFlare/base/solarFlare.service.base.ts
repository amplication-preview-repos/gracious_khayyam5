/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SolarFlare as PrismaSolarFlare } from "@prisma/client";

export class SolarFlareServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SolarFlareCountArgs, "select">
  ): Promise<number> {
    return this.prisma.solarFlare.count(args);
  }

  async solarFlares(
    args: Prisma.SolarFlareFindManyArgs
  ): Promise<PrismaSolarFlare[]> {
    return this.prisma.solarFlare.findMany(args);
  }
  async solarFlare(
    args: Prisma.SolarFlareFindUniqueArgs
  ): Promise<PrismaSolarFlare | null> {
    return this.prisma.solarFlare.findUnique(args);
  }
  async createSolarFlare(
    args: Prisma.SolarFlareCreateArgs
  ): Promise<PrismaSolarFlare> {
    return this.prisma.solarFlare.create(args);
  }
  async updateSolarFlare(
    args: Prisma.SolarFlareUpdateArgs
  ): Promise<PrismaSolarFlare> {
    return this.prisma.solarFlare.update(args);
  }
  async deleteSolarFlare(
    args: Prisma.SolarFlareDeleteArgs
  ): Promise<PrismaSolarFlare> {
    return this.prisma.solarFlare.delete(args);
  }
}
